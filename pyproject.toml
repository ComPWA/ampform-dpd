[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=61.2",
    "setuptools_scm",
]

[project]
authors = [{name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"}]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dependencies = [
    "ampform >=0.15.4", # aslatex with keyword arguments
    "attrs >=20.1.0", # on_setattr and https://www.attrs.org/en/stable/api.html#next-gen
    "cloudpickle",
    "numpy",
    "qrules >=0.10.0",
    "sympy >=1.10", # module sympy.printing.numpy and array expressions with shape kwarg
    "tensorwaves[jax]",
    'typing-extensions; python_version <"3.11.0"',
]
description = "Symbolic expressions for Dalitz-Plot Decomposition"
dynamic = ["version"]
license = {file = "LICENSE"}
name = "ampform-dpd"
requires-python = ">=3.9"

[project.optional-dependencies]
numba = ["tensorwaves[numba]"]
tf = ["tensorwaves[tf]"]

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.urls]
Changelog = "https://github.com/ComPWA/ampform-dpd/releases"
Documentation = "https://compwa.github.io/ampform-dpd"
Source = "https://github.com/ComPWA/ampform-dpd"
Tracker = "https://github.com/ComPWA/ampform-dpd/issues"

[dependency-groups]
dev = [
    "nbmake",
    "ruff",
    "sphinx-autobuild",
    {include-group = "doc"},
    {include-group = "jupyter"},
    {include-group = "style"},
    {include-group = "test"},
]
doc = [
    "myst-nb",
    "sphinx-api-relink",
    "sphinx-book-theme",
    "sphinx-codeautolink[ipython]",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-pybtex-etal-style",
    "sphinx-togglebutton",
    "sphinxcontrib-bibtex",
    {include-group = "notebooks"},
]
jupyter = [
    "jupyterlab",
    "jupyterlab-code-formatter",
    "jupyterlab-git",
    "jupyterlab-lsp",
    "jupyterlab-myst",
    "python-lsp-ruff",
    "python-lsp-server[rope]",
    {include-group = "notebooks"},
]
notebooks = [
    "graphviz",
    "ipympl",
    "ipywidgets",
    "matplotlib",
    "pandas",
    "tensorwaves[phsp]",
    "tqdm",
]
style = [
    "mypy",
    {include-group = "types"},
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-xdist",
]
types = [
    "pytest",
    "sphinx-api-relink",
]

[tool.setuptools]
include-package-data = false
package-dir = {"" = "src"}

[tool.setuptools.package-data]
ampform_dpd = ["py.typed"]

[tool.setuptools.packages.find]
namespaces = false
where = ["src"]

[tool.setuptools_scm]
write_to = "src/ampform_dpd/version.py"

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.mypy]
exclude = "_build"
show_error_codes = true
warn_unused_configs = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["cloudpickle.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["sympy.*"]

[[tool.mypy.overrides]]
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
module = ["tests.*"]

[tool.pyright]
reportArgumentType = false
reportAssignmentType = false
reportAttributeAccessIssue = false
reportCallIssue = false
reportGeneralTypeIssues = false
reportImportCycles = false
reportIncompatibleMethodOverride = false
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportOperatorIssue = false
reportPrivateImportUsage = false
reportReturnType = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryContains = false
reportUnnecessaryIsInstance = false
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
typeCheckingMode = "strict"
venv = ".venv"
venvPath = "."

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "--durations=3",
    "--ignore=docs/conf.py",
    "-m not slow",
]
doctest_optionflags = [
    "IGNORE_EXCEPTION_DETAIL",
]
filterwarnings = [
    "error",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore:The `hash` argument is deprecated in favor of `unsafe_hash` and will be removed in or after August 2025.:DeprecationWarning",
    "ignore:the imp module is deprecated in favour of importlib.*:DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (select with '-m slow')",
]
norecursedirs = [
    ".ipynb_checkpoints",
    "_build",
]
testpaths = [
    "src",
    "tests",
]

[tool.ruff]
extend-exclude = ["typings"]
extend-include = ["*.ipynb"]
preview = true
show-fixes = true
src = [
    "src",
    "tests",
]

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = [
    "ANN",
    "ARG00",
    "B028",
    "C408",
    "COM812",
    "CPY001",
    "D101",
    "D102",
    "D103",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "DOC",
    "E501",
    "FBT",
    "FURB101",
    "FURB103",
    "FURB140",
    "G004",
    "ISC001",
    "ISC003",
    "PLC2401",
    "PLR0913",
    "PLW1514",
    "PT001",
    "PTH",
    "S301",
    "SIM108",
]
select = ["ALL"]
task-tags = ["cspell"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["display"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-self]
ignore-names = [
    "_latex",
    "_print",
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.pep8-naming]
ignore-names = [
    "A",
    "H",
    "L",
    "R",
    "R_dec",
    "R_prod",
    "S",
    "Γ*",
    "λ*",
]

[tool.ruff.lint.per-file-ignores]
"*" = ["D"]
"*.ipynb" = [
    "B018",
    "C90",
    "D",
    "E303",
    "E402",
    "E703",
    "N806",
    "N816",
    "PLR09",
    "PLR2004",
    "PLW0602",
    "PLW0603",
    "PLW2901",
    "S101",
    "T20",
    "TC00",
]
"docs/*" = [
    "E402",
    "INP001",
    "PLR2004",
    "S101",
    "S113",
    "T201",
]
"docs/conf.py" = ["D100"]
"jpsi2ksp.ipynb" = ["PLC2701"]
"serialization.ipynb" = [
    "E741",
    "N813",
    "PLC2403",
    "PLC2701",
    "RUF100",
]
"setup.py" = ["D100"]
"src/ampform_dpd/io/__init__.py" = ["S403"]
"src/ampform_dpd/io/serialization/amplitude.py" = ["E741"]
"src/ampform_dpd/io/serialization/format.py" = ["E741"]
"tests/*" = [
    "D",
    "INP001",
    "PGH001",
    "PLC2701",
    "PLR2004",
    "PLR6301",
    "S101",
    "SLF001",
    "T20",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["_latex_repr_"]

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
    "tool.setuptools_scm",
    "tool.tox.env_run_base",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.tox]
env_list = [
    "3.9",
    "3.10",
    "3.11",
    "3.12",
    "3.13",
    "cov",
    "docnb-force",
    "linkcheck",
    "sty",
]
no_package = true
requires = ["tox>=4.21.0"]
skip_install = true
skip_missing_interpreters = true

[tool.tox.env_run_base]
commands = [["pytest", {replace = "posargs", extend = true}]]
dependency_groups = ["test"]
description = "Run test suite on Python {env_name}"
no_package = false
pass_env = ["*"]
runner = "uv-venv-lock-runner"
skip_install = false
skip_missing_interpreters = false

[tool.tox.env.cov]
commands = [
    [
        "pytest",
        {replace = "posargs", extend = true},
        "--cov-fail-under=65",
        "--cov-report=html",
        "--cov-report=xml",
        "--cov=ampform_dpd",
    ],
]
description = "Compute test coverage"

[tool.tox.env.doc]
allowlist_externals = ["sphinx-build"]
base = []
commands = [
    [
        "sphinx-build",
        "--builder=html",
        "--fail-on-warning",
        "--keep-going",
        "docs/",
        "docs/_build/html/",
    ],
]
description = "Build documentation with Sphinx"

[tool.tox.env.doclive]
allowlist_externals = ["sphinx-autobuild"]
base = []
commands = [
    [
        "sphinx-autobuild",
        "--port=0",
        "--re-ignore=/__pycache__(/.*)?$",
        "--re-ignore=/_build(/.*)?$",
        "--re-ignore=/\\.cache(/.*)?$",
        "--re-ignore=/\\.egg-info(/.*)?$",
        "--re-ignore=/\\.ipynb_checkpoints(/.*)?$",
        "--re-ignore=/\\.virtual_documents(/.*)?$",
        "--re-ignore=/api(/.*)?$",
        "--re-ignore=/docs$",
        "--re-ignore=/version\\.py$",
        "--re-ignore=\\.egg-info(/.*)?$",
        "--re-ignore=\\.pkl$",
        "--re-ignore=\\.png$",
        "--re-ignore=\\.svg$",
        "--watch=src",
        "docs/",
        "docs/_build/html/",
    ],
]
description = "Set up a server to directly preview changes to the HTML pages"

[tool.tox.env.docnb]
base = ["tool.tox.env.doc"]
description = "{[tool.tox.env.doc]description} with cached notebook execution"
set_env.EXECUTE_NB = "yes"

[tool.tox.env.docnb-force]
base = ["tool.tox.env.doc"]
description = "{[tool.tox.env.doc]description} with notebook execution (no cache)"
set_env.FORCE_EXECUTE_NB = "yes"

[tool.tox.env.docnblive]
base = ["tool.tox.env.doclive"]
description = "{[tool.tox.env.doclive]description} with cached notebook execution"
set_env.EXECUTE_NB = "yes"

[tool.tox.env.linkcheck]
base = ["tool.tox.env.doc"]
commands = [
    [
        "sphinx-build",
        "--builder=linkcheck",
        "--show-traceback",
        "docs/",
        "docs/_build/linkcheck/",
    ],
]
description = "Check external links in the documentation (requires internet connection)"
set_env.PYTHONWARNINGS = ""

[tool.tox.env.nb]
commands = [
    [
        "pytest",
        "--nbmake",
        "--nbmake-timeout=0",
        "{posargs:docs}",
    ],
]
description = "Run all notebooks with pytest"
with_dev = true

[tool.tox.env.sty]
allowlist_externals = ["pre-commit"]
base = []
commands = [["pre-commit", "run", "--all-files", {replace = "posargs", extend = true}]]
description = "Perform all linting, formatting, and spelling checks"

[tool.tox.labels]
doc = [
    "docnb-force",
    "linkcheck",
]
test = [
    "3.9",
    "3.10",
    "3.11",
    "3.12",
    "3.13",
]

[tool.uv]
constraint-dependencies = [
    "numpy~=1.0",
]
